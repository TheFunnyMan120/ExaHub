if game.PlaceId == 10118559731 then
    local VLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/vep1032/VepStuff/main/VL"))()
    local Window = VLib:Window("ExaHub", "Nico's Nextbots", "E")

    local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
    local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
        
    Notification:Notify(
        {Title = "ExaHub Alert", Description = "ExaHub has been loaded!"},
        {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 5, Type = "option"},
        {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = function(State) print(tostring(State)) end}
    )

    local Main = Window:Tab("Main")
    Main:Label("Main")
    Main:Button("Bot ESP",function()
        while task.wait(15) do
            for __,v in pairs(game:GetService("Workspace").bots:GetDescendants()) do
             if v:IsA("Model") then
               local a = Instance.new("BillboardGui",v)
               a.Name = "Sex"
               a.Size = UDim2.new(7,0,7,0)
               a.AlwaysOnTop = true
               a.MaxDistance = 250
               local b = Instance.new("Frame",a)
               b.Size = UDim2.new(1,0, 1,0)
               b.BackgroundTransparency = 0.80
               b.BorderSizePixel = 0
               b.BackgroundColor3 = Color3.new(0, 0, 0)
               local c = Instance.new('TextLabel',b)
               c.Size = UDim2.new(2,0,2,0)
               c.BorderSizePixel = 0
               c.TextSize = 15
               c.Text = v.Name
               c.BackgroundTransparency = 1
             end
            end
         end
    end)
    --[[Main:Button("Safe Zone ESP", function()
        print(nil)
    end)
    --]]
    Main:Dropdown("Teleport to Safe Zone",{"Safe Zone 1", "Safe Zone 2", "Safe Zone 3", "Safe Zone 4", "Safe Zone 5"},function(text)
        if text == "Safe Zone 1" then
            local RootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
            local ThePosition = CFrame.new(Vector3.new(-70, 35, 362))
            RootPart.CFrame = ThePosition
        end
        if text == "Safe Zone 2" then
            local minions = game.Players.LocalPlayer.Character.HumanoidRootPart
            local riseofgru = CFrame.new(Vector3.new(-96, 19, -18))
            minions.CFrame = riseofgru
        end
        if text == "Safe Zone 3" then
            local RootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
            local ThePosition = CFrame.new(Vector3.new(-301, 37.25, 56.5))
            RootPart.CFrame = ThePosition
        end
        if text == "Safe Zone 4" then
            local RootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
            local ThePosition = CFrame.new(Vector3.new(-63, 37.5, 355.05))
            RootPart.CFrame = ThePosition
        end
        if text == "Safe Zone 5" then
            local RootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
            local ThePosition = CFrame.new(Vector3.new(99.625, 107.65, 322.8))
            RootPart.CFrame = ThePosition
        end
    end)
    Main:Dropdown("Teleport to Safe Zone (Backrooms)",{"Elevator to Backrooms","Safe Zone 1", "Safe Zone 2",},function(text)
        if text == "Elevator to Backrooms" then
            local RootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
            local ThePosition = CFrame.new(Vector3.new(78.748, 34.5343, 345.891))
            RootPart.CFrame = ThePosition
        end
        if text == "Safe Zone 1" then
            local RootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
            local ThePosition = CFrame.new(Vector3.new(203.5, 22.9, 825.5))
            RootPart.CFrame = ThePosition
        end
        if text == "Safe Zone 2" then
            print("wait until I find it")
            --[[
            local minions = game.Players.LocalPlayer.Character.HumanoidRootPart
            local riseofgru = CFrame.new(Vector3.new(-96, 19, -18))
            minions.CFrame = riseofgru
            ]]
        end
    end)
    Main:Button("Fullbright",function()
        if not _G.FullBrightExecuted then

            _G.FullBrightEnabled = false
        
            _G.NormalLightingSettings = {
                Brightness = game:GetService("Lighting").Brightness,
                ClockTime = game:GetService("Lighting").ClockTime,
                FogEnd = game:GetService("Lighting").FogEnd,
                GlobalShadows = game:GetService("Lighting").GlobalShadows,
                Ambient = game:GetService("Lighting").Ambient
            }
        
            game:GetService("Lighting"):GetPropertyChangedSignal("Brightness"):Connect(function()
                if game:GetService("Lighting").Brightness ~= 1 and game:GetService("Lighting").Brightness ~= _G.NormalLightingSettings.Brightness then
                    _G.NormalLightingSettings.Brightness = game:GetService("Lighting").Brightness
                    if not _G.FullBrightEnabled then
                        repeat
                            wait()
                        until _G.FullBrightEnabled
                    end
                    game:GetService("Lighting").Brightness = 1
                end
            end)
        
            game:GetService("Lighting"):GetPropertyChangedSignal("ClockTime"):Connect(function()
                if game:GetService("Lighting").ClockTime ~= 12 and game:GetService("Lighting").ClockTime ~= _G.NormalLightingSettings.ClockTime then
                    _G.NormalLightingSettings.ClockTime = game:GetService("Lighting").ClockTime
                    if not _G.FullBrightEnabled then
                        repeat
                            wait()
                        until _G.FullBrightEnabled
                    end
                    game:GetService("Lighting").ClockTime = 12
                end
            end)
        
            game:GetService("Lighting"):GetPropertyChangedSignal("FogEnd"):Connect(function()
                if game:GetService("Lighting").FogEnd ~= 786543 and game:GetService("Lighting").FogEnd ~= _G.NormalLightingSettings.FogEnd then
                    _G.NormalLightingSettings.FogEnd = game:GetService("Lighting").FogEnd
                    if not _G.FullBrightEnabled then
                        repeat
                            wait()
                        until _G.FullBrightEnabled
                    end
                    game:GetService("Lighting").FogEnd = 786543
                end
            end)
        
            game:GetService("Lighting"):GetPropertyChangedSignal("GlobalShadows"):Connect(function()
                if game:GetService("Lighting").GlobalShadows ~= false and game:GetService("Lighting").GlobalShadows ~= _G.NormalLightingSettings.GlobalShadows then
                    _G.NormalLightingSettings.GlobalShadows = game:GetService("Lighting").GlobalShadows
                    if not _G.FullBrightEnabled then
                        repeat
                            wait()
                        until _G.FullBrightEnabled
                    end
                    game:GetService("Lighting").GlobalShadows = false
                end
            end)
        
            game:GetService("Lighting"):GetPropertyChangedSignal("Ambient"):Connect(function()
                if game:GetService("Lighting").Ambient ~= Color3.fromRGB(178, 178, 178) and game:GetService("Lighting").Ambient ~= _G.NormalLightingSettings.Ambient then
                    _G.NormalLightingSettings.Ambient = game:GetService("Lighting").Ambient
                    if not _G.FullBrightEnabled then
                        repeat
                            wait()
                        until _G.FullBrightEnabled
                    end
                    game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
                end
            end)
        
            game:GetService("Lighting").Brightness = 1
            game:GetService("Lighting").ClockTime = 12
            game:GetService("Lighting").FogEnd = 786543
            game:GetService("Lighting").GlobalShadows = false
            game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
        
            local LatestValue = true
            spawn(function()
                repeat
                    wait()
                until _G.FullBrightEnabled
                while wait() do
                    if _G.FullBrightEnabled ~= LatestValue then
                        if not _G.FullBrightEnabled then
                            game:GetService("Lighting").Brightness = _G.NormalLightingSettings.Brightness
                            game:GetService("Lighting").ClockTime = _G.NormalLightingSettings.ClockTime
                            game:GetService("Lighting").FogEnd = _G.NormalLightingSettings.FogEnd
                            game:GetService("Lighting").GlobalShadows = _G.NormalLightingSettings.GlobalShadows
                            game:GetService("Lighting").Ambient = _G.NormalLightingSettings.Ambient
                        else
                            game:GetService("Lighting").Brightness = 1
                            game:GetService("Lighting").ClockTime = 12
                            game:GetService("Lighting").FogEnd = 786543
                            game:GetService("Lighting").GlobalShadows = false
                            game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
                        end
                        LatestValue = not LatestValue
                    end
                end
            end)
        end
        
        _G.FullBrightExecuted = true
        _G.FullBrightEnabled = not _G.FullBrightEnabled
    end)
    Main:Button("Powerboxes", function()
        function AddHighlight(powerBox)
            local Highlight = Instance.new("Highlight")
            Highlight.Adornee = powerBox
            Highlight.Parent = powerBox.PowerInteract
            powerBox.PowerInteract.HoldDuration = 0
            if powerBox.PowerInteract.Enabled then
                Highlight.FillColor = Color3.fromRGB(162, 0, 255)
                powerBox.PowerInteract:GetPropertyChangedSignal("Enabled"):Connect(function()
                    Highlight.FillColor = Color3.fromRGB(0, 255, 34)
                end)
            else
                Highlight.FillColor = Color3.fromRGB(0, 255, 34)
            end
        end
        function InitPowerBox(v)
            v.ChildAdded:Connect(function(object)
                if object.Name == "PowerInteract" then
                    AddHighlight(v)
                end
            end)
            if v:FindFirstChild("PowerInteract") then
                AddHighlight(v)
            end
        end
        if game:GetService("ReplicatedStorage").CurrentEvent.Value == "BlackOut" then
            for i,v in next, workspace.PowerBox:GetChildren() do
                if v:FindFirstChild("PowerInteract") then
                    AddHighlight(v)
                end
            end
        end
    end)

    local Player = Window:Tab("Player")
    Player:Label("Player")
    Player:Textbox("Walkspeed", true,function(Walkspeed)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Walkspeed
        warn("Set the walkspeed to "..Walkspeed)
        local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
        local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
            
        Notification:Notify(
            {Title = "ExaHub Alert", Description = "Modified your WalkSpeed to "..Walkspeed},
            {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 5, Type = "option"},
            {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = function(State) print(tostring(State)) end}
        )
    end)
    Player:Textbox("JumpPower", true,function(JumpPower)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = JumpPower
        warn("Set the JumpPower to "..JumpPower)
        local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
        local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
            
        Notification:Notify(
            {Title = "ExaHub Alert", Description = "Modified your JumpPower to "..JumpPower},
            {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 5, Type = "option"},
            {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = function(State) print(tostring(State)) end}
        )
    end)
    local InfiniteJumpEnabled;
    Player:Toggle("Infinite Jump", function(State)
        InfiniteJumpEnabled = State
    end)
    Player:Textbox("Teleport to Player", true,function(player)
        local plr = game.Players[player]
        local char = plr.Character.HumanoidRootPart.CFrame
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = char
        warn("Teleported to "..player)
    end)
    Player:Button("Teleport to a Random Player", function ()
        game.Players.LocalPlayer.Character:MoveTo(game.Players:GetPlayers()[math.random(1, #game.Players:GetPlayers())].Character:FindFirstChild("HumanoidRootPart").Position)
        warn("Teleported to a random player. The player you teleported to was " ..player)
    end)
    Player:Textbox("Chat Spam", true,function(MessageToSpam)
        while true do
            wait(1)
            local args = {
                [1] = (MessageToSpam),
                [2] = "All"
            }
            
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
            warn("Currently spamming "..MessageToSpam)
        end
    end)
    Player:Textbox("Kick Reason", true,function(kickreason)
        game.Players.LocalPlayer:Kick(kickreason)
    end)
    Player:Textbox("Ban Reason", true,function(banreason)
        game.Players.LocalPlayer:Kick("You are banned from the game. Reason: "..banreason)
    end)
    Player:Button("Respawn", function()
        game:GetService("ReplicatedStorage").events.respawnchar:FireServer()
    end)
    Player:Button("Third Person", function()
        print("why does this not work")
        game:GetService('Players').LocalPlayer.CameraMode = 'Classic'
    end)
    local Visuals = Window:Tab("Visuals")
    Visuals:Label("Visuals")

    local Config = {
        Visuals = {
            BoxEsp = false,
            TracerEsp = false,
            TracersOrigin = "Bottom", 
            NameEsp = false,
            DistanceEsp = false,
            SkeletonEsp = false,
            EnemyColor = Color3.fromRGB(255, 0, 0),
            TeamColor = Color3.fromRGB(0, 255, 0),
            MurdererColor = Color3.fromRGB(255, 0, 0)
        }
    }

    local Funcs = {}
function Funcs:IsAlive(player)
	if player and player.Character and player.Character:FindFirstChild("Head") and
		workspace:FindFirstChild(player.Character.Name)
	then
		return true
	end
end

function Funcs:Round(number)
	return math.floor(tonumber(number) + 0.5)
end

function Funcs:DrawSquare()
	local Box = Drawing.new("Square")
	Box.Color = Color3.fromRGB(190, 190, 0)
	Box.Thickness = 1.4
	Box.Filled = false
	Box.Transparency = 1
	return Box
end

function Funcs:DrawLine()
	local line = Drawing.new("Line")
	line.Color = Color3.new(190, 190, 0)
	line.Thickness = 1.5
	return line
end

function Funcs:DrawText()
	local text = Drawing.new("Text")
	text.Color = Color3.fromRGB(190, 190, 0)
	text.Size = 19
	text.Outline = true
	text.Center = true
	return text
end

local Services =
	setmetatable(
		{
			LocalPlayer = game:GetService("Players").LocalPlayer,
			Camera = workspace.CurrentCamera
		},
		{
			__index = function(self, idx)
				return rawget(self, idx) or game:GetService(idx)
			end
		}
	)

function Funcs:AddEsp(player)
	local Box = Funcs:DrawSquare()
	local Tracer = Funcs:DrawLine()
	local Name = Funcs:DrawText()
	local Distance = Funcs:DrawText()
	local SnapLines = Funcs:DrawLine()
	local HeadLowerTorso = Funcs:DrawLine()
	local NeckLeftUpper = Funcs:DrawLine()
	local LeftUpperLeftLower = Funcs:DrawLine()
	local NeckRightUpper = Funcs:DrawLine()
	local RightUpperLeftLower = Funcs:DrawLine()
	local LowerTorsoLeftUpper = Funcs:DrawLine()
	local LeftLowerLeftUpper = Funcs:DrawLine()
	local LowerTorsoRightUpper = Funcs:DrawLine()
	local RightLowerRightUpper = Funcs:DrawLine()
	Services.RunService.Stepped:Connect(
		function()
			if Funcs:IsAlive(player) and player.Character:FindFirstChild("HumanoidRootPart") then
				local RootPosition, OnScreen =
					Services.Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
				local HeadPosition =
					Services.Camera:WorldToViewportPoint(player.Character.Head.Position + Vector3.new(0, 0.5, 0))
				local LegPosition =
					Services.Camera:WorldToViewportPoint(
						player.Character.HumanoidRootPart.Position - Vector3.new(0, 4, 0)
					)
				if Config.Visuals.BoxEsp then
					Box.Visible = OnScreen
					Box.Size = Vector2.new((2350 / RootPosition.Z) + 2.5, HeadPosition.Y - LegPosition.Y)
					Box.Position = Vector2.new((RootPosition.X - Box.Size.X / 2) - 1, RootPosition.Y - Box.Size.Y / 2)
				else
					Box.Visible = false
				end
				if Config.Visuals.TracerEsp then
					Tracer.Visible = OnScreen
					if Config.Visuals.TracersOrigin == "Top" then
						Tracer.To = Vector2.new(Services.Camera.ViewportSize.X / 2, 0)
						Tracer.From =
							Vector2.new(
								Services.Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position).X - 1,
								RootPosition.Y + (HeadPosition.Y - LegPosition.Y) / 2
							)
					elseif Config.Visuals.TracersOrigin == "Middle" then
						Tracer.To = Vector2.new(Services.Camera.ViewportSize.X / 2, Services.Camera.ViewportSize.Y / 2)
						Tracer.From =
							Vector2.new(
								Services.Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position).X - 1,
								(RootPosition.Y + (HeadPosition.Y - LegPosition.Y) / 2) -
								((HeadPosition.Y - LegPosition.Y) / 2)
							)
					elseif Config.Visuals.TracersOrigin == "Bottom" then
						Tracer.To = Vector2.new(Services.Camera.ViewportSize.X / 2, 1000)
						Tracer.From =
							Vector2.new(
								Services.Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position).X - 1,
								RootPosition.Y - (HeadPosition.Y - LegPosition.Y) / 2
							)
					elseif Config.Visuals.TracersOrigin == "Mouse" then
						Tracer.To = game:GetService("UserInputService"):GetMouseLocation()
						Tracer.From =
							Vector2.new(
								Services.Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position).X - 1,
								(RootPosition.Y + (HeadPosition.Y - LegPosition.Y) / 2) -
								((HeadPosition.Y - LegPosition.Y) / 2)
							)
					end
				else
					Tracer.Visible = false
				end
				if Config.Visuals.NameEsp then
					Name.Visible = OnScreen
					Name.Position =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.Head.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.Head.Position).Y - 40
						)
					Name.Text = "[ " .. player.Name .. " ]"
				else
					Name.Visible = false
				end
				if Config.Visuals.DistanceEsp and player.Character:FindFirstChild("Head") then
					Distance.Visible = OnScreen
					Distance.Position =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.Head.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.Head.Position).Y - 25
						)
					Distance.Text =
						"[ " ..
						Funcs:Round(
							(game:GetService("Players").LocalPlayer.Character.Head.Position -
								player.Character.Head.Position).Magnitude
						) ..
						" Studs ]"
				else
					Distance.Visible = false
				end
				if Config.Visuals.SkeletonEsp then
					HeadLowerTorso.Visible = OnScreen
					HeadLowerTorso.From =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.Head.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.Head.Position).Y
						)
					HeadLowerTorso.To =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.LowerTorso.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.LowerTorso.Position).Y
						)
					NeckLeftUpper.Visible = OnScreen
					NeckLeftUpper.From =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.Head.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.Head.Position).Y +
							((Services.Camera:WorldToViewportPoint(player.Character.UpperTorso.Position).Y -
								Services.Camera:WorldToViewportPoint(player.Character.Head.Position).Y) /
								3)
						)
					NeckLeftUpper.To =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.LeftUpperArm.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.LeftUpperArm.Position).Y
						)
					LeftUpperLeftLower.Visible = OnScreen
					LeftUpperLeftLower.From =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.LeftLowerArm.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.LeftLowerArm.Position).Y
						)
					LeftUpperLeftLower.To =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.LeftUpperArm.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.LeftUpperArm.Position).Y
						)
					NeckRightUpper.Visible = OnScreen
					NeckRightUpper.From =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.Head.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.Head.Position).Y +
							((Services.Camera:WorldToViewportPoint(player.Character.UpperTorso.Position).Y -
								Services.Camera:WorldToViewportPoint(player.Character.Head.Position).Y) /
								3)
						)
					NeckRightUpper.To =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.RightUpperArm.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.RightUpperArm.Position).Y
						)
					RightUpperLeftLower.Visible = OnScreen
					RightUpperLeftLower.From =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.RightLowerArm.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.RightLowerArm.Position).Y
						)
					RightUpperLeftLower.To =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.RightUpperArm.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.RightUpperArm.Position).Y
						)
					LowerTorsoLeftUpper.Visible = OnScreen
					LowerTorsoLeftUpper.From =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.LowerTorso.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.LowerTorso.Position).Y
						)
					LowerTorsoLeftUpper.To =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.LeftUpperLeg.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.LeftUpperLeg.Position).Y
						)
					LeftLowerLeftUpper.Visible = OnScreen
					LeftLowerLeftUpper.From =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.LeftLowerLeg.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.LeftLowerLeg.Position).Y
						)
					LeftLowerLeftUpper.To =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.LeftUpperLeg.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.LeftUpperLeg.Position).Y
						)
					LowerTorsoRightUpper.Visible = OnScreen
					LowerTorsoRightUpper.From =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.RightLowerLeg.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.RightLowerLeg.Position).Y
						)
					LowerTorsoRightUpper.To =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.RightUpperLeg.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.RightUpperLeg.Position).Y
						)
					RightLowerRightUpper.Visible = OnScreen
					RightLowerRightUpper.From =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.LowerTorso.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.LowerTorso.Position).Y
						)
					RightLowerRightUpper.To =
						Vector2.new(
							Services.Camera:WorldToViewportPoint(player.Character.RightUpperLeg.Position).X,
							Services.Camera:WorldToViewportPoint(player.Character.RightUpperLeg.Position).Y
						)
				else
					HeadLowerTorso.Visible = false
					NeckLeftUpper.Visible = false
					LeftUpperLeftLower.Visible = false
					NeckRightUpper.Visible = false
					RightUpperLeftLower.Visible = false
					LowerTorsoLeftUpper.Visible = false
					LeftLowerLeftUpper.Visible = false
					LowerTorsoRightUpper.Visible = false
					RightLowerRightUpper.Visible = false
				end
				if game.Players.LocalPlayer.TeamColor ~= player.TeamColor then
					Box.Color = Config.Visuals.EnemyColor
					Tracer.Color = Config.Visuals.EnemyColor
					Name.Color = Config.Visuals.EnemyColor
					Distance.Color = Config.Visuals.EnemyColor
					HeadLowerTorso.Color = Config.Visuals.EnemyColor
					NeckLeftUpper.Color = Config.Visuals.EnemyColor
					LeftUpperLeftLower.Color = Config.Visuals.EnemyColor
					NeckRightUpper.Color = Config.Visuals.EnemyColor
					RightUpperLeftLower.Color = Config.Visuals.EnemyColor
					LowerTorsoLeftUpper.Color = Config.Visuals.EnemyColor
					LeftLowerLeftUpper.Color = Config.Visuals.EnemyColor
					LowerTorsoRightUpper.Color = Config.Visuals.EnemyColor
					RightLowerRightUpper.Color = Config.Visuals.EnemyColor
				else
					Box.Color = Config.Visuals.TeamColor
					Tracer.Color = Config.Visuals.TeamColor
					Name.Color = Config.Visuals.TeamColor
					Distance.Color = Config.Visuals.TeamColor
					HeadLowerTorso.Color = Config.Visuals.TeamColor
					NeckLeftUpper.Color = Config.Visuals.TeamColor
					LeftUpperLeftLower.Color = Config.Visuals.TeamColor
					NeckRightUpper.Color = Config.Visuals.TeamColor
					RightUpperLeftLower.Color = Config.Visuals.TeamColor
					LowerTorsoLeftUpper.Color = Config.Visuals.TeamColor
					LeftLowerLeftUpper.Color = Config.Visuals.TeamColor
					LowerTorsoRightUpper.Color = Config.Visuals.TeamColor
					RightLowerRightUpper.Color = Config.Visuals.TeamColor
				end
			else
				Box.Visible = false
				Tracer.Visible = false
				Name.Visible = false
				Distance.Visible = false
				HeadLowerTorso.Visible = false
				NeckLeftUpper.Visible = false
				LeftUpperLeftLower.Visible = false
				NeckRightUpper.Visible = false
				RightUpperLeftLower.Visible = false
				LowerTorsoLeftUpper.Visible = false
				LeftLowerLeftUpper.Visible = false
				LowerTorsoRightUpper.Visible = false
				RightLowerRightUpper.Visible = false
			end
		end
	)
end

for i, v in pairs(Services.Players:GetPlayers()) do
	if v ~= Services.LocalPlayer then
		Funcs:AddEsp(v)
	end
end

Services.Players.PlayerAdded:Connect(
	function(player)
		if v ~= Services.LocalPlayer then
			Funcs:AddEsp(player)
		end
	end
)
    Visuals:Toggle('3D Box ESP (Cant Change Color)',function(state)
            on = state
            if on == true then 
                --// Made by Blissful#4992
                --// Locals:
                local workspace = game:GetService("Workspace")
                local player = game:GetService("Players").LocalPlayer
                local camera = workspace.CurrentCamera
        
                --// Settings:
        
                local Box_Color = Color3.fromRGB(255, 0, 0)
                local Box_Thickness = 2
                local Box_Transparency = 1 -- 1 Visible, 0 Not Visible
        
                local Tracers = false
                local Tracer_Color = Color3.fromRGB(255, 0, 0)
                local Tracer_Thickness = 2
                local Tracer_Transparency = 1 -- 1 Visible, 0 Not Visible
        
                local Autothickness = false -- Makes screen less encumbered
        
                local Team_Check = true
                local red = Color3.fromRGB(227, 52, 52)
                local green = Color3.fromRGB(88, 217, 24)
        
                local function NewLine()
                    local line = Drawing.new("Line")
                    line.Visible = false
                    line.From = Vector2.new(0, 0)
                    line.To = Vector2.new(1, 1)
                    line.Color = Box_Color
                    line.Thickness = Box_Thickness
                    line.Transparency = Box_Transparency
                    return line
                end
        
                --// Main Function:
                for i, v in pairs(game.Players:GetChildren()) do
                    --// Lines for 3D box (12)
                    local lines = {
                        line1 = NewLine(),
                        line2 = NewLine(),
                        line3 = NewLine(),
                        line4 = NewLine(),
                        line5 = NewLine(),
                        line6 = NewLine(),
                        line7 = NewLine(),
                        line8 = NewLine(),
                        line9 = NewLine(),
                        line10 = NewLine(),
                        line11 = NewLine(),
                        line12 = NewLine(),
                        Tracer = NewLine()
                    }
        
                    lines.Tracer.Color = Tracer_Color
                    lines.Tracer.Thickness = Tracer_Thickness
                    lines.Tracer.Transparency = Tracer_Transparency
        
                    --// Updates ESP (lines) in render loop
                    local function ESP()
                        local connection
                        connection = game:GetService("RunService").RenderStepped:Connect(function()
                            if on and v.Character ~= nil and v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("HumanoidRootPart") ~= nil and v.Name ~= player.Name and v.Character.Humanoid.Health > 0 and v.Character:FindFirstChild("Head") ~= nil then
                                local pos, vis = camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                                if vis then
                                    local Scale = v.Character.Head.Size.Y/2
                                    local Size = Vector3.new(2, 3, 1.5) * (Scale * 2) -- Change this for different box size
        
                                    local Top1 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, Size.Y, -Size.Z)).p)
                                    local Top2 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, Size.Y, Size.Z)).p)
                                    local Top3 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, Size.Y, Size.Z)).p)
                                    local Top4 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, Size.Y, -Size.Z)).p)
        
                                    local Bottom1 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, -Size.Y, -Size.Z)).p)
                                    local Bottom2 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, -Size.Y, Size.Z)).p)
                                    local Bottom3 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, -Size.Y, Size.Z)).p)
                                    local Bottom4 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, -Size.Y, -Size.Z)).p)
        
                                    --// Top:
                                    lines.line1.From = Vector2.new(Top1.X, Top1.Y)
                                    lines.line1.To = Vector2.new(Top2.X, Top2.Y)
        
                                    lines.line2.From = Vector2.new(Top2.X, Top2.Y)
                                    lines.line2.To = Vector2.new(Top3.X, Top3.Y)
        
                                    lines.line3.From = Vector2.new(Top3.X, Top3.Y)
                                    lines.line3.To = Vector2.new(Top4.X, Top4.Y)
        
                                    lines.line4.From = Vector2.new(Top4.X, Top4.Y)
                                    lines.line4.To = Vector2.new(Top1.X, Top1.Y)
        
                                    --// Bottom:
                                    lines.line5.From = Vector2.new(Bottom1.X, Bottom1.Y)
                                    lines.line5.To = Vector2.new(Bottom2.X, Bottom2.Y)
        
                                    lines.line6.From = Vector2.new(Bottom2.X, Bottom2.Y)
                                    lines.line6.To = Vector2.new(Bottom3.X, Bottom3.Y)
        
                                    lines.line7.From = Vector2.new(Bottom3.X, Bottom3.Y)
                                    lines.line7.To = Vector2.new(Bottom4.X, Bottom4.Y)
        
                                    lines.line8.From = Vector2.new(Bottom4.X, Bottom4.Y)
                                    lines.line8.To = Vector2.new(Bottom1.X, Bottom1.Y)
        
                                    --//S ides:
                                    lines.line9.From = Vector2.new(Bottom1.X, Bottom1.Y)
                                    lines.line9.To = Vector2.new(Top1.X, Top1.Y)
        
                                    lines.line10.From = Vector2.new(Bottom2.X, Bottom2.Y)
                                    lines.line10.To = Vector2.new(Top2.X, Top2.Y)
        
                                    lines.line11.From = Vector2.new(Bottom3.X, Bottom3.Y)
                                    lines.line11.To = Vector2.new(Top3.X, Top3.Y)
        
                                    lines.line12.From = Vector2.new(Bottom4.X, Bottom4.Y)
                                    lines.line12.To = Vector2.new(Top4.X, Top4.Y)
        
                                    --// Tracer:
                                    if Tracers then
                                        local trace = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(0, -Size.Y, 0)).p)
        
                                        lines.Tracer.From = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y)
                                        lines.Tracer.To = Vector2.new(trace.X, trace.Y)
                                    end
        
                                    --// Teamcheck:
                                    if Team_Check then
                                        if v.TeamColor == player.TeamColor then
                                            for u, x in pairs(lines) do
                                                x.Color = green
                                            end
                                        else 
                                            for u, x in pairs(lines) do
                                                x.Color = red
                                            end
                                        end
                                    end
        
                                    --// Autothickness:
                                    if Autothickness then
                                        local distance = (player.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).magnitude
                                        local value = math.clamp(1/distance*100, 0.1, 4) --0.1 is min thickness, 6 is max
                                        for u, x in pairs(lines) do
                                            x.Thickness = value
                                        end
                                    else 
                                        for u, x in pairs(lines) do
                                            x.Thickness = Box_Thickness
                                        end
                                    end
        
                                    for u, x in pairs(lines) do
                                        if x ~= lines.Tracer then
                                            x.Visible = true
                                        end
                                    end
                                    if Tracers then
                                        lines.Tracer.Visible = true
                                    end
                                else 
                                    for u, x in pairs(lines) do
                                        x.Visible = false
                                    end
                                end
                            else 
                                for u, x in pairs(lines) do
                                    x.Visible = false
                                end
                                if game.Players:FindFirstChild(v.Name) == nil then
                                    connection:Disconnect()
                                end
                            end
                        end)
                    end
                    coroutine.wrap(ESP)()
                end
        
                game.Players.PlayerAdded:Connect(function(newplr)
                    --// Lines for 3D box (12)
                    local lines = {
                        line1 = NewLine(),
                        line2 = NewLine(),
                        line3 = NewLine(),
                        line4 = NewLine(),
                        line5 = NewLine(),
                        line6 = NewLine(),
                        line7 = NewLine(),
                        line8 = NewLine(),
                        line9 = NewLine(),
                        line10 = NewLine(),
                        line11 = NewLine(),
                        line12 = NewLine(),
                        Tracer = NewLine()
                    }
        
                    lines.Tracer.Color = Tracer_Color
                    lines.Tracer.Thickness = Tracer_Thickness
                    lines.Tracer.Transparency = Tracer_Transparency
        
                    --// Updates ESP (lines) in render loop
                    local function ESP()
                        local connection
                        connection = game:GetService("RunService").RenderStepped:Connect(function()
                            if on and newplr.Character ~= nil and newplr.Character:FindFirstChild("Humanoid") ~= nil and newplr.Character:FindFirstChild("HumanoidRootPart") ~= nil and newplr.Name ~= player.Name and newplr.Character.Humanoid.Health > 0 and newplr.Character:FindFirstChild("Head") ~= nil then
                                local pos, vis = camera:WorldToViewportPoint(newplr.Character.HumanoidRootPart.Position)
                                if vis then
                                    local Scale = newplr.Character.Head.Size.Y/2
                                    local Size = Vector3.new(2, 3, 1.5) * (Scale * 2) -- Change this for different box size
        
                                    local Top1 = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, Size.Y, -Size.Z)).p)
                                    local Top2 = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, Size.Y, Size.Z)).p)
                                    local Top3 = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, Size.Y, Size.Z)).p)
                                    local Top4 = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, Size.Y, -Size.Z)).p)
        
                                    local Bottom1 = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, -Size.Y, -Size.Z)).p)
                                    local Bottom2 = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, -Size.Y, Size.Z)).p)
                                    local Bottom3 = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, -Size.Y, Size.Z)).p)
                                    local Bottom4 = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, -Size.Y, -Size.Z)).p)
        
                                    --// Top:
                                    lines.line1.From = Vector2.new(Top1.X, Top1.Y)
                                    lines.line1.To = Vector2.new(Top2.X, Top2.Y)
        
                                    lines.line2.From = Vector2.new(Top2.X, Top2.Y)
                                    lines.line2.To = Vector2.new(Top3.X, Top3.Y)
        
                                    lines.line3.From = Vector2.new(Top3.X, Top3.Y)
                                    lines.line3.To = Vector2.new(Top4.X, Top4.Y)
        
                                    lines.line4.From = Vector2.new(Top4.X, Top4.Y)
                                    lines.line4.To = Vector2.new(Top1.X, Top1.Y)
        
                                    --// Bottom:
                                    lines.line5.From = Vector2.new(Bottom1.X, Bottom1.Y)
                                    lines.line5.To = Vector2.new(Bottom2.X, Bottom2.Y)
        
                                    lines.line6.From = Vector2.new(Bottom2.X, Bottom2.Y)
                                    lines.line6.To = Vector2.new(Bottom3.X, Bottom3.Y)
        
                                    lines.line7.From = Vector2.new(Bottom3.X, Bottom3.Y)
                                    lines.line7.To = Vector2.new(Bottom4.X, Bottom4.Y)
        
                                    lines.line8.From = Vector2.new(Bottom4.X, Bottom4.Y)
                                    lines.line8.To = Vector2.new(Bottom1.X, Bottom1.Y)
        
                                    --//S ides:
                                    lines.line9.From = Vector2.new(Bottom1.X, Bottom1.Y)
                                    lines.line9.To = Vector2.new(Top1.X, Top1.Y)
        
                                    lines.line10.From = Vector2.new(Bottom2.X, Bottom2.Y)
                                    lines.line10.To = Vector2.new(Top2.X, Top2.Y)
        
                                    lines.line11.From = Vector2.new(Bottom3.X, Bottom3.Y)
                                    lines.line11.To = Vector2.new(Top3.X, Top3.Y)
        
                                    lines.line12.From = Vector2.new(Bottom4.X, Bottom4.Y)
                                    lines.line12.To = Vector2.new(Top4.X, Top4.Y)
        
                                    --// Tracer:
                                    if Tracers then
                                        local trace = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(0, -Size.Y, 0)).p)
                                        lines.Tracer.From = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y)
                                        lines.Tracer.To = Vector2.new(trace.X, trace.Y)
                                    end
        
                                    --// Teamcheck:
                                    if Team_Check then
                                        if newplr.TeamColor == player.TeamColor then
                                            for u, x in pairs(lines) do
                                                x.Color = green
                                            end
                                        else 
                                            for u, x in pairs(lines) do
                                                x.Color = red
                                            end
                                        end
                                    end
        
                                    --// Autothickness:
                                    if Autothickness then
                                        local distance = (player.Character.HumanoidRootPart.Position - newplr.Character.HumanoidRootPart.Position).magnitude
                                        local value = math.clamp(1/distance*100, 0.1, 4) --0.1 is min thickness, 6 is max
                                        for u, x in pairs(lines) do
                                            x.Thickness = value
                                        end
                                    else 
                                        for u, x in pairs(lines) do
                                            x.Thickness = Box_Thickness
                                        end
                                    end
        
                                    for u, x in pairs(lines) do
                                        if x ~= lines.Tracer then
                                            x.Visible = true
                                        end
                                    end
                                    if Tracers then
                                        lines.Tracer.Visible = true
                                    end
                                else 
                                    for u, x in pairs(lines) do
                                        x.Visible = false
                                    end
                                end
                            else 
                                for u, x in pairs(lines) do
                                    x.Visible = false
                                end
                                if game.Players:FindFirstChild(newplr.Name) == nil then
                                    connection:Disconnect()
                                end
                            end
                        end)
                    end
                    coroutine.wrap(ESP)()
                end)
            end
        end)
    Visuals:Toggle('Box ESP',function(state)
            Config.Visuals.BoxEsp = state
        end)
    Visuals:Toggle('Line ESP',function(state)
            Config.Visuals.TracerEsp = state
        end)
    Visuals:Dropdown(
            "Lines Origin", {'Top','Middle','Bottom','Mouse'}, function(selected)
                Config.Visuals.TracersOrigin = selected
            end)
    Visuals:Toggle('Name ESP',function(state)
                Config.Visuals.NameEsp = state
            end)
    Visuals:Toggle('Distance ESP',function(state)
                Config.Visuals.DistanceEsp = state
            end)
    Visuals:Toggle('Skeletons ESP',function(state)
                Config.Visuals.SkeletonEsp = state
            end)
    Visuals:Colorpicker(
                "Enemy Color",
                Color3.fromRGB(0, 255, 0),
                function(Color)
                    Config.Visuals.TeamColor = Color
                end
            )

    local Misc = Window:Tab("Misc")
    Misc:Label("Misc")
    Misc:Button("Freecam Unlocker", function ()
    loadstring(game:HttpGet(("https://pastebin.com/raw/Jy3ZkFQ6"),true))()
        warn("freecam loaded")
    end) 
    Misc:Button("Click Teleport (Z)", function ()
        player = game.Players.LocalPlayer 
        humanoid = player.Character.HumanoidRootPart
        mouse = player:GetMouse() 
        mouse.KeyDown:connect(function(key) 
        if key == z then 
        if mouse.Target then 
        humanoid.CFrame = CFrame.new(mouse.Hit.x, mouse.Hit.y + 5, mouse.Hit.z) 
        end 
        end 
        end)
    end) 
    Misc:Label("RightControl to toggle UI")



    
    local Player = game:GetService("Players").LocalPlayer
    game:GetService("UserInputService").JumpRequest:Connect(function()
     if InfiniteJumpEnabled then
         Player.Character:WaitForChild("Humanoid"):ChangeState("Jumping")
        end
    end)

end
